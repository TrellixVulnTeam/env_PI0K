#!/bin/bash

# Fix for using Ctrl-S in Vim
stty -ixon

# Use gls instead of ls
alias ls='ls --color'

# some more ls aliases
alias ll='ls -alFX' # Sort by type
alias la='ls -AX' # Sort by type
alias lt='ls -lt' # Sort by date
alias l='ls -CF'

# refresh shell
alias reload='source ~/.bashrc'

alias screen='screen -A'

# My git aliases
alias gitl='git log --name-only'
alias g-ls='git ls-files'
alias go-ls='git ls-files -o --directory'
alias st='git status'
alias g-diff='git diff'
alias gs-diff='git diff --staged'
alias g-show='git show'
alias gn-show='git show --name-only'
alias pull='git pull --rebase'
alias r-pull='git pull --rebase origin'
alias push='git push'
alias rebase='git rebase $(git --no-pager branch | fzf +m)'
alias co='git checkout'
alias br='git --no-pager branch -vv'
alias n-br='git checkout -b'
alias commit='git commit'
alias a-commit='git commit --amend'
alias ae-commit='git commit --amend --no-edit'
alias add='git add'
alias stash='git stash'
alias save='git stash save -u'
alias a-stash='git stash apply $(git stash list | fzf +m -1 -0| cut -d':' -f1)'
alias d-stash='git stash drop $(git stash list | fzf +m -1 -0 | cut -d':' -f1)'
alias s-stash='git show $(git stash list | fzf +m -1 -0 | cut -d':' -f1)'
alias flog='git log --graph --abbrev-commit --decorate --all --format=format:"%C(bold blue)%h%C(reset) - %C(bold cyan)%cD%C(dim white) - %an%C(reset) %C(bold green)(%cr)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)"'
alias g-patch='git format-patch -1'
alias a-patch='git am <'
alias l-merge='git merge $(git --no-pager branch | fzf +m -1 -0)'
alias r-merge='git merge --no-ff $(git --no-pager branch | fzf +m -1 -0)'
alias d-commit='git reset --hard HEAD^'
alias r-commit='git reset --soft HEAD^'
alias s-update='git submodule update --remote'

# Grep aliases
alias grep='grep --color=auto'
alias grepo='grep --exclude=\*.{bin,out,t32,elf,o,a,map,git,rst}'
alias grepp='grep -rni'

## Colorize the grep command output for ease of use (good for log files)##
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

# Make mount command output pretty and human readable format
alias mount='mount |column -t'

# Resume wget by default
alias wget='wget -c'

# Moving around
alias ..='cd ..'
alias .2='cd ../../'
alias .3='cd ../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../../'

# Finding stuff!
alias fd='find . -type d -iname'
alias ff='find . -type f -iname'

# OSX specific aliases
unamestr=`uname`
if [[ "$unamestr" == 'Darwin' ]]; then
    # Check for macOS updates
    alias upc='softwareupdate -l'

    # Download and install macOS updates
    alias upd='softwareupdate -i -a'

    # Get macOS Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages
    alias update='sudo softwareupdate -i -a; brew update; brew upgrade; brew cleanup; sudo gem updat --system; sudo gem update; sudo gem cleanup'

    # Show/hide hidden files in Finder
    alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
    alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

    # Time functions
    alias nowtime='date +"%T"'
    alias nowdate='date +"%d-%m-%Y"'
    alias now='nowtime && nowdate'

    # hibernation and sleep settings
    alias hibernate='sudo pmset -a hibernatemode 25'
    alias sleep='sudo pmset -a hibernatemode 0'
    alias safesleep='sudo pmset -a hibernatemode 3'
    alias smartsleep='sudo pmset -a hibernatemode 2'
fi

unalias f-add 2>/dev/null
f-add() {
    git add $(git status -s | fzf --multi -1 -0 | awk '{print $2}')
}


unalias r-file 2>/dev/null
r-file() {
    git reset HEAD $(git status -s | fzf --multi -1 -0 | awk '{print $2}')
}


unalias g-revert 2>/dev/null
g-revert() {
    if [ ! -n "$1" ]; then
        git checkout $(git status -s | fzf --multi | awk '{print $2}')
    else
        git checkout "$1" $(git status | fzf --multi | awk '{print $2}')
    fi
}

unalias r-sync 2>/dev/null
r-sync() {
    next=$PWD
    substr=fw-
    while :
    do
        if [[ $next = ${next#*$substr} ]] ; then
            break
        elif [[ $next == "/" ]] ; then
            echo "ERROR: could not find fw-* directory"
            exit 1
        else
            repo_dir=$next
            next=$(dirname $next)
        fi
    done

    pushd $repo_dir
    repo sync
    popd
}

unalias ci 2>/dev/null
ci() {
    local branch
    branch=$(git --no-pager branch -vv | fzf +m -1 -0 | awk '{print $1}')
    git checkout $branch
}

unalias b-del 2>/dev/null
b-del() {
    local branch
    branch=$(git --no-pager branch -vv | fzf +m -1 -0 | awk '{print $1}')
    git branch -D $branch
}

unalias r-br 2>/dev/null
r-br() {
    local branch
    branch=$(git --no-pager branch -r | fzf +m) && #get the branch name to checkout
    branch=$(echo "$branch" | awk '$1=$1') && #remove extra spaces
    remote=$(echo "$branch" | cut -d'/' -f1) && #get the remote
    target=$(echo "$branch" | cut -d'/' -f2) && #get the remote target branch
    git checkout -b $target --track $remote/$target
}


unalias r-del 2>/dev/null
r-del() {
    local branch
    branch=$(git --no-pager branch -r | fzf +m) && #get the branch name to checkout
    branch=$(echo "$branch" | awk '$1=$1') && #remove extra spaces
    remote=$(echo "$branch" | cut -d'/' -f1) && #get the remote
    target=$(echo "$branch" | cut -d'/' -f2) && #get the remote target branch
    git push $remote --delete $target
}


unalias c-diff 2>/dev/null
c-diff() {
    local c_sha
    c_sha=$(git log --pretty=format:"%h  %ad%x09%cd  %<(20)%cr%<(40trunc)%an%s" --date=short | fzf +m -1 -0 | cut -d' ' -f1) &&
    git diff $c_sha~ $c_sha
}

unalias c-del 2>/dev/null
c-del() {
    local c_sha
    c_sha=$(git log --pretty=format:"%h  %ad%x09%cd  %<(20)%cr%<(40trunc)%an%s" --date=short | fzf +m | cut -d' ' -f1) &&
    git rebase --onto $c_sha^ $c_sha
}


unalias d-tag 2>/dev/null
d-tag() {
    local tag
    tag=$(git tag | fzf-tmux +mulit -1 -0 ) &&
    git push --delete origin $tag &&
    git tag -d $tag
}

f-stash() {
    local out q k sha
    while out=$(
        git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
        fzf --ansi --no-sort --query="$q" --print-query \
            --expect=ctrl-d,ctrl-b);
    do
        mapfile -t out <<< "$out"
        q="${out[0]}"
        k="${out[1]}"
        sha="${out[-1]}"
        sha="${sha%% *}"
        [[ -z "$sha" ]] && continue
        if [[ "$k" == 'ctrl-d' ]]; then
            git diff $sha
        elif [[ "$k" == 'ctrl-b' ]]; then
            git stash branch "stash-$sha" $sha
            break;
        else
            git stash show -p $sha
        fi
    done
}

is_in_git_repo() {
    git rev-parse HEAD > /dev/null 2>&1
}
